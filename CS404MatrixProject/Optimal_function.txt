// REFERENCE URL's: http://www.personal.kent.edu/~rmuhamma/Algorithms/MyAlgorithms/Dynamic/chainMatrixMult.htm	For comprehension of the algorithm
// -> http://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/						For implementation reference of algorithm
/*
pre: pass in an array, the size n of the array, and an array to store the computed cost of different parenthizations.
post: returns the optimal minimal cost for multiplying the matrix chain.
*/
long int OMCmatrix(vector<int> vec_arr) {

	int i, j, k, L, q;
	int n = vec_arr.size();
	long int cost_arr[30][30] = { 0 };
	/* m[i,j] = Minimum number of scalar multiplications needed
	to compute the matrix A[i]A[i+1]...A[j] = A[i..j] where
	dimension of A[i] is p[i-1] x p[i] */

	// cost is zero when multiplying one matrix.
	for (i = 1; i<n; i++)
		cost_arr[i][i] = 0;

	// L is chain length.
	for (L = 2; L<n; L++)
	{
		for (i = 1; i<n - L + 1; i++)
		{
			j = i + L - 1;
			cost_arr[i][j] = INT_MAX;
			for (k = i; k <= j - 1; k++)
			{
				// q = cost/scalar multiplications
				q = cost_arr[i][k] + cost_arr[(k + 1)][j] + vec_arr[i - 1] * vec_arr[k] * vec_arr[j];
				if (q < cost_arr[i][j])
					cost_arr[i][j] = q;
			}
		}
	}

	return cost_arr[1] [(n - 1)];
}